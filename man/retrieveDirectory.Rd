% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/retrieveDirectory.R
\name{retrieveDirectory}
\alias{retrieveDirectory}
\title{Retrieve a directory}
\usage{
retrieveDirectory(
  path,
  url,
  cache = NULL,
  forceRemote = FALSE,
  overwrite = FALSE,
  concurrent = 1,
  updateDelay = 3600
)
}
\arguments{
\item{path}{String containing the absolute path to a registered directory.}

\item{url}{String containing the URL to the SewerRat REST API.}

\item{cache}{String containing a path to a cache directory.
If \code{NULL}, an appropriate location is automatically chosen.
Only used for remote access.}

\item{forceRemote}{Logical scalar indicating whether to force remote access.
This will download all files in the \code{path} via the REST API and cache them locally,
even if \code{path} is on the same filesystem as the caller.}

\item{overwrite}{Logical scalar indicating whether to overwrite the existing cache.
Only used for remote access.}

\item{concurrent}{Integer scalar specifying the number of concurrent downloads.
Only used for remote access.}

\item{updateDelay}{Integer scalar specifying the interval before checking for updates in a cached directory, in seconds.
Only used for remote access.}
}
\value{
Path to the subdirectory on the caller's filesystem.
This is either a path to the registered (sub)directory if it is accessible,
or a path to a local cache of the directory's contents otherwise.
}
\description{
Retrieve the path to a registered directory (or its subdirectories), 
possibly creating a local copy of the directory's contents if the caller is not on the same filesystem.
}
\details{
During remote access, this function exhibits the following behavior:
\itemize{
\item It will only check for updates to the directory contents after \code{updateDelay} seconds have passed since the previous check.
This avoids unnecessarily frequent requests to the SewerRat API.
\item If a file in \code{path} has already been locally cached, \code{retrieveDirectory} will be automatically check the SewerRat API for updates.
Any updates on the remote will cause the new file to be re-downloaded to the cache.
\item Any cached files that are no longer in the remote \code{path} will be deleted from the cache.
}
}
\examples{
info <- startSewerRat()

# Mocking up a directory of stuff to query.
mydir <- tempfile()
dir.create(mydir)
write(file=file.path(mydir, "foo"), '{ "first": "Aaron", "last": "Lun" }')
dir.create(file.path(mydir, "diet"))
write(file=file.path(mydir, "diet", "bar"), 
   '{ "meal": "lunch", "ingredients": "water" }')

# Registering it:
register(mydir, "metadata.json", url=info$url)

# Fetching it, either directly or via the API.
retrieveDirectory(mydir, url=info$url)
retrieveDirectory(paste0(mydir, "/diet"), url=info$url, forceRemote=TRUE)

}
\author{
Aaron Lun
}
