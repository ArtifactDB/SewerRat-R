% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quickSave.R
\name{quickSave}
\alias{quickSave}
\alias{quickRead}
\title{Quickly save and read objects from disk}
\usage{
quickSave(x, metadata, path)

quickRead(path)
}
\arguments{
\item{x}{Some Bioconductor object.}

\item{metadata}{A list of metadata describing the object.
Any JSON-compatible data can be stored, in any structure; though it is conventional to have a \code{title} and \code{description} field.}

\item{path}{String containing the path to the directory in which to save \code{x}.
Note that this should be world-readable if it is to be registered in \code{\link{register}}.}
}
\value{
\code{quickSave} will save \code{x} to \code{path}.
Metadata will be saved inside \code{path} in a \code{_metadata.json} file.

\code{quickRead} returns a list containing \code{x}, the Bioconductor object; and \code{metadata}, a list containing the metadata.
}
\description{
Quickly save and read Bioconductor objects from their on-disk representations (based on the \pkg{alabaster.base} package).
}
\examples{
# Staring up a test service:
startSewerRat()

# Mocking up a Bioconductor object:
library(S4Vectors)
df <- DataFrame(A=1:10, B=LETTERS[1:10])
meta <- list(title="A data frame", description="This is a data frame")

# Saving it inside a directory to be registered:
dir <- tempfile()
dir.create(dir)
quickSave(df, meta, file.path(dir, "my_df"))

# Then we just register that directory:
register(dir, "_metadata.json")

# And now we can find interesting things:
res <- query("data frame")

# ... and load them back in:
quickRead(res[[1]]$path)

# Shutting down our test service:
stopSewerRat()
}
\author{
Aaron Lun
}
